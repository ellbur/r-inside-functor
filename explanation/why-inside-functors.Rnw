
<<print=F,echo=F>>=
options(R2HTML.formatter=HTMLFormatHighlight)
@

<<results=html,echo=F>>=
HTMLGetHighlightCSS()
@

<style type="text/css">
.command {
	font-family: monospace;
	color: rgb(200,200,200);
	white-space: pre;
}
p.commandline {
	margin-top: 0px;
	margin-bottom: 0px;
}
.functioncall {
	color: rgb(20,100,100);
}
.hr {
	visibility: hidden;
}
</style>

<p>By "inside" I mean inside the parentheses, unlike normal functors which are
written outside the parentheses.</p>

<p>This really starts with a grammatical detail. Sentences like</p>
<<eval=F>>=
sapply(ns, function(n) {
	sum(1:n)
})
@

<p>translate into English "Take the list of, for every element in
<code>ns</code> the sum of 1 to n." This is fine for coding but that's not at
all how you'd actually talk.</p>

<p>What if the code were written like</p>
<<eval=F>>=
sum(1:each(ns))
@

<p>Which sounds like "Take the sum from 1 to each of the ns", which I think
sounds more natural. The challenge: make that code run.</p>

<p>Let's make things easier for a moment and consider just functions of 1 variable.
Clearly we are going to have to change what is meant by "calling" a function. So
forget nice syntax for a moment and define</p>
<<>>=
apply.check.functor = function(func, arg) {
    if (is.inside.functor(arg)) {
        apply.functor(arg, func, arg)
    }
    else {
        func(arg)
    }
}
@

<p>Here we assume <code>apply.functor</code> is a method that individual functor
classes will define.</p>

<p>Then we can define <code>each</code> like</p>

<<>>=
each = function(arg) {
    inside = list(
        items = arg
    )
    class(inside) = 'each'
    inside
}

apply.functor.each = function(inside, func, arg) {
    each(
		lapply(inside$items, function(x) {
			apply.check.functor(func, x)
		})
    )
}

is.inside.functor.each = function(inside) {
	T
}
@

<p>And you can see this is working exactly like <code>fmap</code> from say
Haskell.</p>

<p>Then add those methods we needed,</p>
<<>>=
is.inside.functor = function(...) {
    UseMethod('is.inside.functor')
}

is.inside.functor.default = function(...) {
    F
}

apply.functor = function(...) {
    UseMethod('apply.functor')
}
@

<p>And test:</p>

<<>>=
sum.until = function(n) {
	sum(1:n)
}

x = c(1, 2, 3)
x

y = apply.check.functor(sum.until, each(x))$items
y
@

<p>And they can be nested:</p>

<<>>=
z = apply.check.functor(round, apply.check.functor(sin, each(x)))$items
z
@ 

<p>And now to make the syntax nicer. Rather than calling
<code>apply.check.functor</code> each time, the function being called can do
that itself:</p>

<<>>=
fmap = function(func) {
	params = formals(args(func))
	new.func = function() {
		.args = as.list(environment())
		apply.check.functor(func, .args[[1]])
	}
	formals(new.func) = params
	new.func
}

sum.until. = fmap(sum.until)

y = sum.until.(each(x))$items
y
@

<p>(This version of <code>fmap</code> has several technical problems which I'll
point out later).</p>

<p>BUT our original example had a function of 2 arguments. If we're going to start
handling multiple arguments, we have to answer a few questions:</p>
<ol>
<li>What do we do if some arguments are <code>inside.functor</code>s and others are not?</li>
<li>How do we handle multiple disagreeing <code>inside.functor</code>s?</li>
</ol> 

<p>Take the first one. If you really want to imitate English (which I do), it's only
inevitable that</p>

<<eval=F>>=
each(x) + 1
@

<p>should add 1 to each x. So the argument <code>1</code> should be "brought in" to the
functor.</p>

<p>For the second question, take the example</p>

<<eval=F>>=
each(x) + each(y)
@

<p>where clearly the intent is to "line up" the corresponding elements of x and y.
Actually, to closer follow English you would say</p>

<<eval=F>>=
each(x) + corresponding(y)
@

<p>Which might be preferable because it is less ambiguous.</p>

<p>More will follow.</p>

